<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ed Prince</title>
    <description>Freelance web developer
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 16 Mar 2016 14:34:07 +0000</pubDate>
    <lastBuildDate>Wed, 16 Mar 2016 14:34:07 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Jekyll continued</title>
        <description>&lt;h3 id=&quot;carrying-on-with-jekyll&quot;&gt;Carrying on with Jekyll&lt;/h3&gt;

&lt;p&gt;This post is going to continue where I left off from my previous post, about
Jekyll. So we now know how to include html in other html files using Liquid.
So, now think of the html that is needed to be included. We are talking about
HTML that will be required in every page. So, there will almost always be the
&lt;code&gt;head.html&lt;/code&gt; file, containing links to external CSS, and meta tags. Sometimes
they will also include links to the JavaScript files, but better practice is to
add those further down the file. Why? Say we have a huge JS file, and several
libraries that need to be loaded, a device on a slow network may take a long
time to load that page. If the JavaScript is being loaded at the top of the
page, then the rest of the HTML will only be displayed once they have been fully
loaded. The alternative is to link the JS further down the page. What this
allows is for the HTML to load up, giving the user something to look at - some
sort of feedback much more quickly, before the JavaScript fills in when it is
ready.&lt;/p&gt;

&lt;p&gt;So, alongside the &lt;code&gt;head.html&lt;/code&gt;, there will likely be some sort of navigation on
each page, often stored in another file called &lt;code&gt;header.html&lt;/code&gt;. Finally, the other
default file in there will usually be &lt;code&gt;footer.html&lt;/code&gt;, containing the HTML for the
footer that will be displayed on every page. I am saying ‘usually’, because if
you use other people’s themes, there is nothing to stop them removing these
files and adding different ones instead, so it might not always be true, but it
will if you use the default Jekyll theme.&lt;/p&gt;

&lt;p&gt;The files in the &lt;code&gt;_layouts&lt;/code&gt; directory will include these files in the layouts
that are appropriate, again, likely to be all of them.&lt;/p&gt;

&lt;h3 id=&quot;creating-a-new-page-for-the-site&quot;&gt;Creating a new page for the site&lt;/h3&gt;

&lt;p&gt;To create a new page for the site, you simply need to add a new &lt;code&gt;something.html&lt;/code&gt;
in the root of the project. I tend to copy one of the existing pages to do this,
but it’s not a lot to do from scratch. You just need to use the liquid format to
choose a layout for the page. I like to add a title as well. This would look
like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;---
layout: page
title: My Title
---&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can just add any HTML you like for this new page. Chances are, that’s
all you have to do, the theme will probably now add this automatically to the
navigation menu, as it loops over all the html files in the root of the
directory and adds links to the navigation menu.&lt;/p&gt;

&lt;h3 id=&quot;configyml&quot;&gt;_config.yml&lt;/h3&gt;

&lt;p&gt;By now you may have noticed the file called &lt;code&gt;_config.yml&lt;/code&gt;. This is a very
important configuration file with which you should definitely become familiar.
Fortunately it’s pretty self explanatory. In here, there is data such as the
site title, a site description, links to social media accounts. Again it will
vary depending on which theme you have. Fill this data out as accurately as
possible.&lt;/p&gt;

&lt;h2 id=&quot;some-jekyll-dos-and-donts&quot;&gt;Some Jekyll do’s and dont’s&lt;/h2&gt;

&lt;h1 id=&quot;donts&quot;&gt;Dont’s&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In the root of the project, there is a directory called &lt;code&gt;_site&lt;/code&gt;. This has the
build of the site in, all the HTML after it’s been built by Liquid. &lt;strong&gt;don’t&lt;/strong&gt;
edit the files inside this folder. It’s not dangerous, just a waste of time.
It can be tempting to try and force the title of a page to change by changing
it in that directory, but every time you run &lt;code&gt;jekyll serve&lt;/code&gt;, it will
overwrite everything in that directory with a new build, changing anything
you modified.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Don’t&lt;/strong&gt; be disheartened if it’s confusing to begin with, it’s bound to be,
invest some time into learning it, it’s worth it!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;dos&quot;&gt;Do’s&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Experiment with the default theme to begin with, get and idea for how Jekyll
works at it’s simplest, understand the file system, and then start using
themes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Try creating your own theme, it’s great downloading pre-built themes and
using theme, but try building one yourself at some point, it’s sure to make
you understand how Jekyll works.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Become familiar with SCSS. Many Jekyll themes make use of SCSS, and if you
want to customize anything, then you will probably want to understand the
basics of SCSS. It’s not essential, you can add CSS to a SCSS file, but it
makes it easier to have a basic knowledge.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Give it time and patience, and have fun!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 18 Mar 2016 09:59:05 +0000</pubDate>
        <link>http://yourdomain.com/tech/2016/03/18/jekyll-continued.html</link>
        <guid isPermaLink="true">http://yourdomain.com/tech/2016/03/18/jekyll-continued.html</guid>
        
        
        <category>tech</category>
        
      </item>
    
      <item>
        <title>Making this site</title>
        <description>&lt;h3 id=&quot;first-ever-post&quot;&gt;First ever post…&lt;/h3&gt;

&lt;p&gt;So to me it seemed pretty fitting that the very first post on this blog would be
about the creation of the website it’s on, so lets dive straight in!&lt;/p&gt;

&lt;p&gt;For some time now, I have been an enthusiast about Jekyll. If you’re thinking Mr
Hyde, then head over to their site and have a quick look. Jekyll is currently
allowing me to write this post in simple markdown, rather than HTML, which is a 
lovely benefit, and before I get asked why I’m not using Wordpress, Jekyll
allows total 100% control over the customization of the site. Yes it’s a little
harder to get your teeth into. Yes you are not gifted the libraries of widgets
and extensions as you are in Wordpress, but for me the control makes up for that
and more. It frustrates me to no end to be developing a site, and for my design
criteria not to be met, not due to a lack of know-how, but simply because the
platform makes it exceedingly difficult to undertake certain tasks… &lt;strong&gt;Anyway&lt;/strong&gt;, 
before I bore you to death, lets get further into the site and the workings of Jekyll.&lt;/p&gt;

&lt;p&gt;Rather than develop my own theme from scratch, I have used the fantastic theme
designed by HTML5 Up, and am now customizing the CSS, giving me the look and
feel that is exactly what I want. People might say “you’re a web developer,
surely your job is to make these themes, why not make your own?”. That’s the
territory of the web designer, something I touch on, but not something I pride
myself in. Most of my work is more towards front end applications, building
sites, maintaining sites etc. And I figured, when there is a great free theme
out there, very close to what you have in mind, why re-invent the wheel and
waste time writing it out all from scratch. This also allowed me to get the site
up and running (albeit with a lack of content), but a reasonable prototype, in
one night. Not a bad turn around.&lt;/p&gt;

&lt;h3 id=&quot;challenges&quot;&gt;Challenges&lt;/h3&gt;

&lt;p&gt;First and foremost, Jekyll is a blogging platform, and yet the theme I have
used, didn’t include any blog templates, so that’s where a bit of thinking is
done. I was able to copy the blog functionality from an older jekyll site I
maintain, and integrate it - not exactly seamlessly - into this site. The
problems begin to arise mostly with the classes and CSS. The new theme is using
certain classes to style everything, with the integrated blog using old classes,
meaning parts will not match the design of the rest of the site. After scanning
the CSS file, I was able to re-administer more suitable class names to the
elements in the blog page, and with a tiny bit more custom CSS, presto, the
blogging was working.&lt;/p&gt;

&lt;p&gt;But &lt;strong&gt;how&lt;/strong&gt; exactly does the blog work? To answer this, we’ll talk
a bit more about how Jekyll works. It uses a template engine called &lt;strong&gt;Liquid&lt;/strong&gt;.
This is where Jekyll really begins coming into its own. Using liquid, we are
able to render markdown as HTML, include HTML files into others and a whole raft
of other things we will get into. So, each post I write is a new file that
belongs in the &lt;code&gt;_posts/&lt;/code&gt; directory, and it must be named with the following
format: &lt;code&gt;yyyy-mm-dd-some-name.md&lt;/code&gt;. This allows the engine to work out what it is
and where it should go. Now that we’ve done this, we get into Liquid.&lt;/p&gt;

&lt;p&gt;At the top of this markdown file, we write:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;---
layout: blog-post
title: Blog Post Title
date: 2016-03-14 13:49:34
categories: category-of-some-kind
---&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The layout is telling Liquid how to present the rest of the page (excluding the
post content), the title is what will be displayed at the top of the post, and
the date below that. Then we can add categories for self explanatory reasons.
What does this mean? So, without writing any HTML, we can start writing our post
in markdown.&lt;/p&gt;

&lt;p&gt;The layouts reside in a &lt;code&gt;_layouts/&lt;/code&gt; directory, at the same level as &lt;code&gt;_posts/&lt;/code&gt;.
Inside we can have as many layouts as we want. For example, you could have some
blog posts that were on the left hand side, with a sidebar on the right, and a
different layout that had the sidebar on the left and the post content on the
right.&lt;/p&gt;

&lt;p&gt;We also have an &lt;code&gt;_includes&lt;/code&gt; directory, in which we can have html files that will
save a &lt;strong&gt;lot&lt;/strong&gt; of time. In here we can have a &lt;code&gt;head.html&lt;/code&gt; file,
which contains all the links to external CSS/Javascript, meta tags, the lot,
anything you would put in the head of a standard HTML file. Then, instead of
having to write it at the top of each page on your site, you can simply include
it using  &lt;code&gt;{% include head.html %}&lt;/code&gt;  on each layout you want it to be included in
(which is probably every layout).&lt;/p&gt;

&lt;p&gt;This has already been a pretty long post, so I’ll cut it there for now, but will
continue my lengthy rants about why I love Jekyll in the near future.&lt;/p&gt;

&lt;p&gt;Keep up to date with tech @ &lt;a href=&quot;https://news.ycombinator.com/&quot;&gt;Hacker News&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 14 Mar 2016 13:49:05 +0000</pubDate>
        <link>http://yourdomain.com/tech/2016/03/14/making-this-site.html</link>
        <guid isPermaLink="true">http://yourdomain.com/tech/2016/03/14/making-this-site.html</guid>
        
        
        <category>tech</category>
        
      </item>
    
  </channel>
</rss>
